library(readr)
lanshrsnEMG <- read_delim("Desktop/tkeo_project/tko/EMG_txt/lanshrsnEMG.TXT",
"\t", quote = "\\\"", escape_double = FALSE,
trim_ws = TRUE)
View(lanshrsnEMG)
lanshrsnEMG
lanshrsnEMG[,2]
lanshrsnEMG[c(2:end),2]
dim(lanshrsnEMG)
dim(lanshrsnEMG)[1]
c(2:dim(lanshrsnEMG)[1])
plot(lanshrsnEMG[c(2:dim(lanshrsnEMG)[1])],2)
plot(lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2])
plot(c(0:dim(lanshrsnEMG)[1]-2),lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2])
plot(c(0:dim(lanshrsnEMG)[1]-1),lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2])
plot(c(0:dim(lanshrsnEMG)[1]-3),lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2])
plot(c(0:dim(lanshrsnEMG)[1]-3),lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2],lines)
plot(lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2],lines)
plot(line(lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2]))
plot.ts(lanshrsnEMG[c(2:dim(lanshrsnEMG)[1]),2])
plot.ts(lanshrsnEMG[c(1:dim(lanshrsnEMG)[1]),2])
plot(lanshrsnEMG)
length(lanshrsnEMG)
length(lanshrsnEMG,x =1)
?length
help("iris")
install.packages(c("ggplot2","devtools"))
old.packages()
update.packages()
library(ggplot2)
detach("package:ggplot2",unload = TRUE)
help("package="ggplot2"")
help(ggplot2)
help("ggplot2")
help("package.contents",ggplot2)
sessionInfo()
install.packages("KernSmooth")
library(KernSmooth)
detach("package:KernSmooth", unload = TRUE)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x<-c('a',4,TRUE)
class(x)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
hw1_data[1:2,]
hw1_data[152:153,]
hw1_data[47,]
x<-is.na(hw1_data$Ozone)==TRUE
x<-is.na(hw1_data$Ozone)
x==TRUE
x<-x(x==TRUE)
x<-x[x==TRUE]
mean(hw1_data$Ozone,na.rm = TRUE)
x<-hw1_data$Ozone>31&hw1_data$Temp>90
mean(hw1_data$Solar.R[x])
mean(hw1_data$Solar.R[x],na.rm = TRUE)
x<-hw1_data$Month==5
max(hw1_data$Ozone[x],na.rm = TRUE)
x<-hw1_data$Month==6
mean(hw1_data$Temp[x])
swirl()
library(swirl)
library("swirl")
swirl()
getwd()
ls
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'),recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by = 0.5)
seq(5,30,length.out = 30)
seq(5,30,length=30)
seq(5,10,length.out =30)
my_seq<-seq(5,10,length.out =30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
c(0.5,55,-10,6)
num_vec<-c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
x<-num_vect>=6
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = TRUE)
paste(my_char,collapse =" ")
my_name<-c(my_char,"andrea")
my_name
paste(my_name,collapse =" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
swirl()
x<-c(44,NA,5;NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[x>0 & !is.na(x)]
x[!is.na(x) $ x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA).
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
indentical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
library("swirl")
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(2,5)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients<-c('Bill','Gina','Kelly','Sean')
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cname<-c("patient","age","weigth","bp","rating","test")
cnames<-c("patient","age","weigth","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
`colnames(my_data)<-cnames
colnames(my_data)<-cnames
my_data
colnames(my_data) <- cnames
my_data
library(swirl)
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSW
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=
7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE, FALSE, FALSE)
TRUE&c(TRUE, FALSE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE).
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
TRUE(6>4)
isTRUE(6>4)
identical("twins","twins")
xor(5==6, !FALSE)
ints<sample(10)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
x <- 1:10
if(x > 5) {
x <- 0
}
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hello")
submit()
mad_libs(place="ostra",adjective="beautiful",noun="Andrea")
submit()
"I"%p%"love%p%"r"
"I" %p% "love" %p% "r"
"I" %p% "love" %p% "R"
("I" %p% "love") %p% "R"
('I' %p% 'love') %p% 'R'
info(9)
info()
skip
skip()
View(`%p%`)
View(telegram)
View(remainder)
View(mad_libs)
View(remainder)
library("iris")
library(datasets)
data("iris")
?iris
iris
s<-split(iris,colnames("virginica"))
s<-split(iris,colnames("virginica"),drop = fFALSE)
s<-split(iris,colnames("virginica"),drop = FALSE)
lapply(iris$Species=="virginica",mean)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
saapli
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, function, FUN.VALUE = type, ...)
vapply(flags, unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1)))
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass summary)
tapply(flags$population, flags$landmass,summary)
?split
virg_iris<-split(iris,iris$Species=="virginica")
virg_iris
virg_iris<-split(iris,"virginica")
virg_iris
virg_iris<-split(iris,list(iris$Species="virginica")
virg_iris<-split(iris,list(iris$Species="virginica"))
list("Species"="virginica")
virg_iris<-split(iris,list(Species="virginica"))
virg_iris
tapply(iris,iris$Species, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
rowMeans(iris[,1:4])
colMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],2,mean)
data("mtcars")
mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
me_mpg<-tapply(mtcars$mpg,mtcars$cyl,mean)
me_mpg
class(me_mpg)
abs(me_mpg[1],me_mpg[3])
abs(me_mpg[1]-me_mpg[3])
debug(ls)
me_hp<-tapply(mtcars$hp,mtcars$cyl,mean)
me_hp
library(datasets)
data(mtcars)
me_hp<-tapply(mtcars$hp,mtcars$cyl,mean)
me_hp
abs(me_hp[1]-me_hp[3])
setwd("~/Desktop/ProgrammingAssignment2")
getwd
getwd()
source("~/Desktop/ProgrammingAssignment2/cachematrix.R")
K<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
K
makeCacheMatrix(K)
K_spec<-makeCacheMatrix(K)
K_spec
K_spec<-makeCacheMatrix() K
K_spec$set()
K_spec$set(K)
K_spec$set()
K_spec$set
View(K_spec)
K_spec$get()
K_spec$getinv()
cacheSolve(K_spec)
K_spec$getinv()
K_spec$setinv()
K_spec$getinv()
K_spec$get()
K_spec$getinv()
K<-cacheSolve(K_spec)
cacheSolve(K_spec)
K_spec$setinv()
K_spec$getinv()
K_spec$setinv<-cacheSolve
K_spec$getinv()
K_spec$setinv<-cacheSolve(K_spec)
source("~/Desktop/ProgrammingAssignment2/cachematrix.R")
K_spec$set(K)
K_spec$setinv()
?solve
cacheSolve(K_spec)
K_spec$setinv()
K_spec$getinv()
K_spec$getmat()
K_spec$get()
K
K_spec$set(matrix(c(1,2,3,4),nrow = 2,ncol = 2))
K_spec$get()
K_spec$setinv()
K_spec$setinv(K_spec$get())
K_spec$getinv()
K_spec$get()
K_spec$getinv()
cacheSolve(K_spec)
K_spec$getinv()
cacheSolve(K_spec)
K_spec$getinv()
cacheSolve(K_spec)
x$getinv()
K_spec$getinv()
K_spec$getinv(K_spec)
K_spec$getinv()
K_spec$set((c(1,2,3,4),nrow = 2,ncol = 2))
K_spec$set(c(1,2,3,4),nrow = 2,ncol = 2)
K_spec<-makeCacheMatrix(c(1,2,3,4),nrow=2,ncol=2)
K_spec
K_spec$get()
K_spec$getinv()
K_spec$seetinv()
K_spec$getinv()
K_spec$gettinv()
K_spec$getinv()
cacheSolve(K_spec)
source("~/Desktop/ProgrammingAssignment2/cachematrix.R")
K_spec<-makeCacheMatrix(c(1,2,3,4),nrow=2,ncol=2)
K_spec<-makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
cacheSolve(K_spec)
